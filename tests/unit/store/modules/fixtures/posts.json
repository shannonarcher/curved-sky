{"fields":{"title":{"name":"title","type":"text","localize":false,"options":[]},"excerpt":{"name":"excerpt","type":"markdown","localize":false,"options":[]},"body":{"name":"body","type":"markdown","localize":false,"options":[]},"tags":{"name":"tags","type":"text","localize":false,"options":[]},"published":{"name":"published","type":"boolean","localize":false,"options":[]}},"entries":[{"cover":{"path":"rebase-cherry-pick.png"},"title":"Git Rebasing","excerpt":"A short summary of rebasing and where this tool can come in handy.","body":"## What is rebasing?\n\nRebasing provides a way of integrating changes between two branches. The alternative to rebasing is to use merging.\n\n**Merging** integrates changes by creating a new commit that resolves the histories of the two branches.\n\nThis strategy doesn't edit or delete your git history which means any merge can be undone easily with no data loss. The downside is that an active branch such as development or master can quickly have its history become messy and hard to use.\n\n![An Illustration of Merging](https:\/\/wac-cdn.atlassian.com\/dam\/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055\/02.svg?cdnVersion=le)\n\n**Rebasing** instead takes every commit in your feature branch, then recreates each of these commits onto the branch you're rebasing off (the destination branch). The result is that your feature branch looks as if you've branched from the latest commit within the destination and then made your changes. This method can be destructive however and often requires force pushing to the remote repository which is generally ill-advised.\n\nThe major benefit is a cleaner git history which supports the usability of other tools such as git log and git bisect.\n\n![An Illustration of Rebasing](https:\/\/wac-cdn.atlassian.com\/dam\/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5\/03.svg?cdnVersion=le)\n\n\n## When do I rebase?\n\nWe want to rebase whenever we want to integrate changes from one branch to another. \n\nMy usual workflow consists of completing a feature, rebasing from development (one last time), testing that my feature still works with everything in development and then using a fast-forward merge back into development.\n\nFast-forwarding gives us the ability to update the destination with our changes while preventing additional merge commits and maintaining that clean history.\n\nIt is also useful to rebase just for the opportunity to clean up your branch\u2019s commits (using an interactive rebase) by adding details to commit messages and \/ or removing noise by squashing.\n\n## How do I rebase?\n\nTo initiate an interactive rebase from development, use the following command:\n\n```\ngit rebase -i development\n```\n\nOnce this has run we are presented with a list of the commits we've created and a variety of options for handling each commit.\n\n```\npick 3456789 wip\npick 9876543 TIX-57 feature complete\npick 9876567 TIX-57 tests\npick 7903422 linting fix -_-\n\n# Rebase 3456789..7903422 onto 58e48b8c8 (1 command)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n```\n\nI commonly use **r**eword to clean up commit messages, i.e. detailing the feature contents or the bug ticket number etc, and **f**ixup to squash intermediate commits such as lint fixes, wip\u2019s and unit testing. This is done by adding our commands in place of \"pick\" like so,\n\n```\nr 3456789 wip\nf 9876543 TIX-57 feature complete\nf 9876567 TIX-57 tests\nf 7903422 linting fix -_-\n```\n\nWe can then exit the editor. For each commit git will recreate and append the commit to the branch we're rebasing off, setting the head of our current branch to the result. If any conflicts occur, git will ask us to resolve them and continue (or abort) the rebase process.\n\nBy rewriting our branch's history we will need to force push to our remote branch as git is no longer able to automatically resolve the difference. However, as long as it\u2019s only us that are working on the branch, we can safely force push to overwrite the remote branch with our shiny clean branch.\n\n**Warning!** Do not git push -f without specifying a branch name. The default push strategy will force push every branch which can produce unintended results.\n\n```\ngit push -f origin head\n```\n\n### Rebasing without a Destination Branch\nAs an aside, we also don't need to have a destination branch to clean our git history. We can rebase locally by targeting a commit that already exists in the branch,\n\n```\ngit rebase -i HEAD~2\n```\n\nThe syntax `HEAD~2` indicates that we want to rebase to **2** commits before our latest commit (**HEAD**). We can then go through the same process described above.\n\n## Summary\n\nRebasing is a incredibly useful tool, and something I use multiple times daily. It isn't always the answer though and is something that should be used with caution as it is capable of causing data loss. Always consider whether rebasing is ideal for the situation that you are in and don't be afraid to consider using other tools in the git toolbox that are better suited.\n\n\n### Further Reading\n[Merging vs. Rebasing, Atlassian.com](https:\/\/www.atlassian.com\/git\/tutorials\/merging-vs-rebasing)","tags":"git,tutorial","published":true,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1555616972,"_created":1553028824,"_id":"5c9156d86635632ab40002ba","coverBackground":"rgb(215, 163, 136)"},{"cover":"","title":"Atomic Habits: A Review","excerpt":"I review how the best-selling book **Atomic Habits** by James Clear has affected my life after 4 months and why you should read it.","body":"Published in October 2018, **Atomic Habits** has quickly risen in popularity, becoming an instant best seller. \n\nThe book's philosophy is that small, incremental improvements compound into much larger success and this is communicated in a refreshingly concise and well-organised manner. At the start of the book, James Clear proposes a framework of 4 \"laws\" for creating or breaking habits, each one containing its own collection of strategies for abiding by the \"law\". Throughout the book, each strategy is explored in easily understood detail and illustrated with several engaging examples (real-life and hypothetical).\n\nJames Clear also provides a number of resources through his [website](https:\/\/jamesclear.com\/atomic-habits) such as a cheat sheet for the entire framework as well as templates for the relevant strategies. To access these it requires subscribing to his mailing list where you'll often receive short write-ups inspired by Atomic Habits. These act as a great way to refresh the ideas present in the book and are a good read for anyone whether they've read Atomic Habits or not.\n\n## Thoughts While Reading\n\nOne thing that really stuck while reading this book was reflecting on times when I'd successfully developed a habit or achieved a goal and recognizing how what I'd done fit within the framework. One of these moments was as a teenager and young adult I consistently struggled with my weight, and looking back it was solely because of a number of very bad habits I'd developed during that time. On my second attempt at weight loss I was able to completely chip away at my bad habits through a combination of three strategies; reducing friction for maintaining a diet, making \"eating nothing\" enjoyable, and reframing my mindset. \n\nReducing friction is a method for *making it easy*, the 3rd law, and was vital for maintaining my diet. From the start, I conceded that figuring out what to eat and then preparing a variety of meals on a regular basis was a recipe for failure. I also understood that losing weight was a matter of calories, that output simply needed to exceed input. Armed with these facts, I threw out the notion of variety and made myself the same thing to eat for every meal. I reduced my portions to 1,250kj (300cal) per meal and spaced them out to every 3-4 hours from 10am to minimise hunger and therefore any desire to break my diet. I was effectively running a 7,500kj (1,800cal) deficit per day, resulting in 2.5kg (5.5lbs) of body fat loss per week. By identifying and removing these obstacles; preparation, choice and temptation; I was able to make eating so little \"easy\".\n\nIt also isn't an easy task to try and make eating nothing enjoyable, the human body has developed over millions of years to fight starvation with every ounce of its being. However, by reframing my mindset with an tight focus on my goal, I was able to make the process of losing weight satisfying. To me, every minute I experienced hunger was a minute of progress towards my goal and thereby emotionally rewarding. It wasn't until much later that I realised that acquiring this ability, to transform my physical discomfort into mental comfort, was extremely critical in resetting my habits in the long term.\n\nOverall seeing the strategies I'd personally encountered brought to form in the book was an enlightening experience for me and made the read so much more enjoyable as my personal anecdotes joined the author in illustrating his points.\n\n## Thoughts After Reading\n\nThe completion of this book coincided with the new year so I decided as a resolution I would adopt one new habit per week this year totalling 52 habits adopted or broken by the end of the year. \n\nStretching has always been something I know I should do more of but on the list of things I do at the gym it has always been a very low priority. So I decided that this was the first hill to climb in my 52-week resolution. I downloaded a habit tracker, entered it as a daily habit and planned to stretch at least 2 minutes before bed every day. [The 2-minute rule](https:\/\/jamesclear.com\/how-to-stop-procrastinating) is a part of making it easy and is designed to make starting a habit as easy as possible by forcing you to reduce the scope to something that can be done in two minutes. By only doing a small amount of the habit you want to develop, you focus on consistency, with the hope that once it becomes easy to start it will become much easier to improve on. Combined with the habit tracker to keep me accountable and incorporating it as part of my new nightly routine I've stretched for 101 out of 103 days in the new year.\n\nFlossing has also been a long time desire but low priority for me as I've never suffered from poor dental health or bad breath. However, after a recent wisdom tooth extraction along with a resorption issue, the beginnings of halitosis took root and was enough to motivate me to take my dental hygiene much more seriously. Just like when maintaining my diet, I accepted my weakness that traditional flossing was laborious enough to be an obstacle and sought to reduce the friction by purchasing [Oral B Floss Picks](https:\/\/www.amazon.com\/gp\/product\/B00FBQBPDE\/ref=as_li_ss_tl?ie=UTF8&th=1&linkCode=sl1&tag=flosspicksbb0-20&linkId=f1b05be0bd268745c4f7cd04301432ca&language=en_US) and keeping them next to my toothbrush to make them more visible. [Habit stacking](https:\/\/jamesclear.com\/habit-stacking) also came into play here, the way of taking advantage of well-established habits in the development of new habits. Brushing my teeth in the evenings has always been something I've done and by using that as a cue for flossing I was able to transform a single habit into a set or routine. This proved to be so successful, the mix of reducing friction, habit stacking and a constant focus on the benefits that I've flossed every single day since starting the habit on January 13th.\n\nSnoozing was another major habit I wanted to gain control over and is an extremely common problem for most people. It's such a hard problem to combat because in a groggy half-conscious state it's very difficult for the determined, sensible part of your mind to take over and force you to do the uncomfortable. I resolved to [prime my environment](https:\/\/jamesclear.com\/reset-the-room) to tackle this issue, the idea of setting up your environment to make the hard tasks a little easier. This took the form of placing my alarm on the other side of the room, forcing me to physically get out of bed to turn it off and putting me in a situation where making the next decision to start the day was much easier. \n\n## Moving Forward\n\nIn the future, I'd like to wake up at 5 am consistently and hit the gym so that my afternoons are then freed up. The biggest obstacle for this is that exertion in the early hours of the morning is a very unattractive prospect. However, I'm already some of the ways there, since moving I now am surrounded by a few people that already get up at ungodly hours of the morning which has inspired me to do the same. This is mentioned in Atomic Habits as joining a culture where the desired behaviour is the norm. Additionally, what might be necessary is more priming of my environment by logging off everything at 8.30pm and planning my afternoons better so that there aren't any more demands for my time before days end.\n\nI'd like to drink less as well. The key to this should be avoiding situations where alcohol is likely to be thereby making it invisible, increasing friction by not having alcohol in the house or leaving my ID at home, learning to enjoy being sober in situations I feel the need to drink like being out with friends or on a weekend night, and finally focusing on the benefits, i.e. feeling better in the morning, the long term health impacts etc. \n    \nAnd finally, general procrastination. I have a terrible habit of doing things for too long, I don't leave work on time because I want to keep working, I stay too long at the gym because I'll hang around and play basketball etc. I think the trick to this is identifying each instance of procrastination and using different methods to break that habit, such as using an app or tool to shut down my laptop at a given time, avoid bringing basketball shoes to the gym etc.\n\n\n## Summary\nI highly recommend Atomic Habits to get an in-depth understanding of how to make small, effective changes and gain more control in your life. In the short time since reading it, I've been able to demonstrate it's efficacy through the small, albeit significant successes in areas of my life I couldn't have expected otherwise. \n\nDo yourself a favour and [buy the book](https:\/\/www.amazon.com\/dp\/0735211299\/ref=cm_sw_em_r_mt_dp_U_JJ1SCbJ0WPA0Z) for access to the 70% of the strategies I haven't mentioned here and [sign up to the mailing list](https:\/\/jamesclear.com\/atomic-habits\/cheatsheet).\n","tags":"book review,self-improvement","published":true,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1555294692,"_created":1553029194,"_id":"5c91584a6635632ba00003d7","coverBackground":"rgb(255, 218, 56)"},{"cover":"","title":"The Importance of Reflection","excerpt":"","body":"Recently there was a situation I was in that involved many parties and resulted in a lot of frustrations, misunderstandings, wrong assumptions.\n\nTasked with addressing these issues rather than moving past them I reflected on the the meetings I was in and what I saw. I then attempted to come up with a short, concise list of take aways, things that could be easily digested and acted upon. The intent of keeping it easily digestable was to prevent further muddying of the waters, something I've been trying to apply to all my communications.\n\nWhat resulted was walking away from the meeting with more confidence in the people I was working with, a greater understanding of the big picture which informed the assumptions that I had come up with trying to understand during the process while only having a small window into what was actually happening.\n\nA few things I've,\n\n- people will walk into meetings pre-frustrated if they don't appreciate the reason for the meeting\n- this then transforms into disengagement where they don't pay attention and take on very little of the information being shared in the meeting\n- OR, people take their own understandings into the meeting and without proper leadership the meeting digresses from its purpose and devolves into variably useful chatter\n\nThe meeting I had effectively acted as a review \/ retrospective that is already an established pattern within the scrum process. Here I was able to take on the perspective of another and realise my assumptions were based on a limited perspective.\n\nthe importance of assuming people are doing their best, and the futility of trying to kick a rock\n","tags":"leadership,soft skills","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1553633198,"_created":1553096957,"_id":"5c9260fd6635633337000336","coverBackground":null},{"coverBackground":"rgb(215, 163, 136)","title":"Git Cherry Picking","excerpt":"A short summary of cherry-picking and where this tool can come in handy.","body":"## What is cherry-picking?\n\nCherry-picking is a tool for picking a single or sequence of commits from one branch and recreating them on another branch.\n\n\n## When do I cherry-pick?\n\nImagine a scenario where we've created a bugfix but we've also made the mistake of branching off development instead of our release branch.  \n\nWe need to get our fix into release so our options consist of:\n- Branching from release and copy paste-ing everything, but we might miss something through human error. **Bad.**\n- Or we could merge our branch as it is, but then we might drag other changes that are in development into release. **Bad!**\n- Or we could cherry-pick our commits and apply them to a fresh cut of release. **Good!**\n\n## How do I cherry-pick?\n\nNow that you're convinced, how do you start? \n\nFirstly, we need to know the commit hash. A commit hash is a unique identifier that is assigned to each commit. To obtain the hash we can use `git log`.\n\n```\ngit log our-bugfix-branch\n```\n\nThe commit hash is the jumble of letters and numbers after *commit*\n\n```\ncommit 10ed59f79a746355ffa278d738bef8e897df5a9d (HEAD -> bugfix, origin\/bugfix)\nAuthor: Us <us@company.com>\nDate:   Mon Mar 4 15:32:01 2019 -0600\n\n   Bug fix for feature problem\n```\n\nThen while we are on the bugfix branch cut from release, simply cherry-pick the commit using the commit hash.\n\n```\ngit cherry-pick 10ed59f79a746355ffa278d738bef8e897df5a9d\n```\n\nThis will then apply each of the commits we've cherry-pick'd (one in this example) onto our new bugfix branch in a similar process as rebasing. Any conflicts we encounter will need to be resolved and then we'll be able to continue (or abort) the cherry-pick process.\n\n## Summary\n\nCherry-picking is a very simple yet extremely useful tool and worth knowing even if it's for that rare circumstance where you need it. I've personally noticed the more I learn about git and the different ways it can be used the more often I've started to encounter these sorts of situations.\n","tags":"git,tutorial","published":true,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1555616963,"_created":1553450855,"_id":"5c97c767663563327c00010f"},{"coverBackground":"rgb(161, 0, 94)","title":"Testing Vue: The Basics","excerpt":"A small tutorial where we create a simple component and then go through the steps of unit testing it using vue-test-utils.","body":"# The Component\n\n```\nexport default {\n\tname: 'PhoneNumberInput',\n  template: `\n    <input\n        type=\"tel\"\n      :value=\"formattedValue\"\n      @input=\"handleInput\"\n        >\n  `,\n  props: {\n  \tvalue: {\n    \ttype: String,\n      default: '',\n    }\n  },\n  computed: {\n  \tformattedValue() {\n    \treturn `+1 (${value.slice(0, 3)}) ${value.slice(3)}`;\n    },\n  },\n  methods: {\n  \thandleInput($event) {\n    \tconst cleanValue = $event.target.value.replace(\/[^0-9]\/g, '');\n    \tthis.$emit('input', cleanValue);\n    }\n  }\n};\n```\n\n# The Tests\n\n## Step 1: Write your behaviours\n\nfirst describe block references the component being tested\n```\ndescribe('PhoneInput', ...\n```\n\nNested describe blocks should describe behaviours of the component\n```\ndescribe('when provided an initial value', ...\ndescribe('when user inputs a valid input', ...\ndescribe('when user inputs an invalid input', ...\n```\nThere is an infinite range of inputs for each of these scenarios so the this is where you need to use your intuition to decide what you want to test, a good rule to follow is zero, one, many. In addition to this though you'd want to test common use cases, and potentially fragile use cases. For example,\n\n```\n\/\/ zero test\ndescribe('when provided an initial value of \"\"', () => {\n\tit('should display an empty string', ...\n\n\/\/ one test\ndescribe('when provided an initial value of \"5555559500\" (full phone number)', () => {\n\tit('should display the formatted value of (555) 555-9500', ...\n    \n\/\/ many test\ndescribe('when provided an initial value of \"555555\" (partial phone number)', () => {\n\tit('should display the formatted value of (555) 555-', ...\n    \n\/\/ common use case\ndescribe('when entering a letter or special character', () => {\n\tit('should remove the non-numeric characters and format the value', ...\n\n\/\/ fragile or highly specific use case that has a high risk of breaking in the future\ndescribe('when inputting text in the middle of the value', () => {\n\tit('should reposition the cursor after the final character of the text input',  ...\n```\n\n## Step 2: Setup your tests\n\n## Step 3: Make your assertions\n\n\nExamples of bad tests\n\nit('should accept a prop of value', ...\n","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1553698822,"_created":1553633016,"_id":"5c9a8ef8663563745d000288"},{"coverBackground":"rgb(255, 152, 0)","title":"A Public Interface for Large Vue(x) Apps","excerpt":"After stumbling upon a discussion in the Vuex github forums I explore a Vuex-related design pattern present in vue-enterprise-boilerplate and touted by a core Vue team member.\n\n","body":"Last week I found [this interesting discussion](https:\/\/github.com\/vuejs\/vuex\/issues\/1417) on the Vuex Github about using scoped slots as data providers for Vuex instead of mapXXX helpers. Within it, Chris Fritz describes a pattern that he uses in his projects when dealing with Vuex in larger applications. His ideas intrigued me and I decided to look into it a little deeper.\n\n## What's the idea?\n\nA single helper file describes the data and actions available from all Vuex modules. The interface is then imported into each individual component based on their own concerns.\n\nThat helper file ends up looking like this,\n\n```javascript\nimport {mapState, mapGetters, mapActions} from 'vuex';\n\nexport const cartComputed = {\n    ...mapState('cart', [\n        'archive',\n    ]),\n    ...mapGetters('cart', [\n        'cart',\n    ])\n};\n\nexport const cartMethods = mapActions('cart', [\n    'getCart',\n    'addItem',\n    'removeItem',\n    'updateItemQuantity',\n]);\n\nexport const userComputed = ...\nexport const userMethods = ...\nexport const orderComputed = ...\nexport const orderMethods = ...\n```\n\nWhile a component would import and use this file like so,\n\n```javascript\nimport {\n    cartComputed,\n    userComputed,\n    orderComputed,\n    orderMethods,\n } from '@store\/helpers.js'\n\nexport default {\n    name: \"OrderForm\",\n    computed: {\n        ...cartComputed,\n        ...userComputed,\n        ...orderComputed,\n    },\n    methods: {\n        ...orderMethods,\n    }\n};\n```\n\n## Pros\n\nThe benefits listed by Chris within the discussion include,\n- Prevents verbose and duplicated mapXXX code in components, replaced by a nice list of global concerns that this component cares about\n\n- When adding new state\/getters\/actions they are automatically available in any component\n\n- Any Vuex level refactors such as renaming or the splitting up of modules can be done in two parts, firstly within Vuex and secondly the public interface and affected components.\n\nI would also include the following benefits\n\n**+ Forces some level of consistency between components**\n\nUsing this method, `this.cart` in component A is going to mean the same thing in component B. In larger teams and when introducing new developers, this sort of mechanism for maintaining consistency can become invaluable.\n\n**+ Hides details of the state tree from our components**\n\nWe want to avoid coupling the state tree details with every component that needs that data. In doing this we avoid difficult refactors, breaking changes and the pointless task of differentiating between getters and state.\n\n```javascript\nexport default {\n    name: 'OrderForm',\n    computed: {\n        ...mapState({\n            archive: state => state.cart.archive,\n            user: state => state.user.user,\n            order: state => state.order.order,\n        }),\n        ...mapGetters('cart', ['cart']),\n    },\n    methods: {\n        ...mapActions('order', ['submitOrder']),\n    }\n};\n```\n\nIn this example the state tree structure is now highly coupled with this component and any changes can introduce breaking changes. In contrast, it would look like the following using the public interface,\n\n```javascript\nimport {\n    cartComputed,\n    userComputed,\n    orderComputed,\n    orderMethods,\n } from '@store\/helpers.js'\n\nexport default {\n    name: \"OrderForm\",\n    computed: {\n        ...cartComputed,\n        ...userComputed,\n        ...orderComputed,\n    },\n    methods: {\n        ...orderMethods,\n    }\n};\n```\n\nThere are a few situations I can think of where this would have come in handy. One of those was when I was moving some data from state to a getter because I needed to do some calculations based on other data I had. Using a public interface, no component updates would have been necessary. Later on, I noticed developers had gotten used to accessing the data I'd moved via state meaning they were using the pre-calculated value, unknowingly introducing unexpected behaviour.\n\n**+ Decouples tests from the store**\n\nIdeally mocking the store behaviour no longer needs to be done by creating a store instance, mocking the required behaviour for the component and then adding it to the component. Instead, we only need to mock the public interface with what we require. \n\nUnfortunately, this doesn't appear to have been implemented in the projects Chris linked in the discussion. In my own project, using Karma+Jasmine I was also not able to successfully modify the import for a component. Fortunately my existing store mock worked perfectly with the public interface so at least no additional changes to tests were required.\n\nI think that the ideal scenario of mocking the getters and actions exposed via the public interface is possible with some non-minor changes to how we are implementing it. Alternatively, based on a limited investigation, I believe that Jest provides the mock functionality we require to make this possible.\n\n*Test with a mock store*\n\n```javascript\nfunction createComponent() {\n    const submitOrder = jasmine.createSpy('submitOrder');\n    const store = new Vuex.Store({\n        modules: {\n            order: {\n                namespaced: true,\n                methods: {\n                    submitOrder,\n                },\n            },\n            user: { ... },\n            cart: {\n                namespaced: true,\n                getters: {\n                    instance:() => ({ ... }),\n                },\n            }\n        }\n    });\n    const localVue = createLocalVue();\n    localVue.use(Vuex);\n    \n    return {\n        component: mount(Component, {\n            store,\n            localVue,\n        }),\n        spies: {\n            submitOrder,\n        }\n    };\n}\n\ndescribe('MyComponent', () => {\n    describe('when in a situation', () => {\n        it('does a thing', () => {\n            const {component, spies} = createComponent();\n            expect(...\n        });\n    });\n});\n```\n\n*Test with a mock interface*\n\n```javascript\nimport * as storeHelpers from '@store\/helpers';\n\nfunction createComponent() {\n    const localVue = createLocalVue();\n    localVue.use(Vuex);\n    \n    return mount(Component, {\n        localVue,\n    });\n}\n\ndescribe('MyComponent', () => {\n    beforeEach(() => {\n        storeHelpers.cartComputed = {\n            cart: () => ({ ... }),\n            archive: () => ({ ... }),\n        };\n        storeHelpers.orderComputed = {\n            order: () => ({ ... }),\n        };\n        storeHelpers.orderMethods = {\n            submitOrder: jasmine.createSpy(),\n        };\n    });\n    describe('when in a situation', () => {\n        it('does a thing', () => {\n            const component = createComponent();\n            expect(...\n        });\n    });\n});\n```\n\n\n\n## Cons\n\n**- Additional boilerplate is required**\n\nWe now need a whole other file to describe our Vuex store's public interface that we need to update and maintain. This is excessive for small projects but is a minor price to pay for the benefits to larger projects and we recoup most of our costs when weighing it up against the clutter that mapXXX functions add.\n\n**- Adding new state\/getters\/actions that are automatically available in any component may introduce conflicts with existing props or data, and it's not explicit what you're importing**\n\nOne thing I'm not really happy about is the implicit mapping of the entire store's interface. Chris lists this as one of the primary benefits however I am unable to justify it considering the accompanying risk of introducing conflicts and hard to debug logic errors. In addition, spreading a module's \"computed\" into a component is horribly inexplicit, with the only way to know what is being added to your component is to check the interface. Adding data or an action to the public interface would also require having to look at every component that imports it to check for potential conflicts.\n\nThe first solution for this issue that comes to mind is to destructure the computed and method chunks into what the component actually cares about. While this neutralizes the benefit Chris describes, I would personally opt for being explicit in this situation. An upside to this implementation is that you should also see Vue throw explicit errors when trying to create a component using getters or methods that no longer exist.\n\n```javascript\nimport {\n    cartComputed,\n    userComputed,\n    orderComputed,\n    orderMethods,\n } from '@store\/helpers.js'\n \nconst { cart, archive } = cartComputed;\nconst { user } = userComputed;\nconst { order } = orderComputed;\nconst { submitOrder } = orderMethods;\n\nexport default {\n    name: \"OrderForm\",\n    computed: {\n        cart,\n        archive,\n        user,\n        order,\n    },\n    methods: {\n        submitOrder,\n    }\n};\n```\n\n## Summary \n\nWhile basically a simple [facade](https:\/\/en.wikipedia.org\/wiki\/Facade_pattern), I believe the benefits of this pattern for larger projects are significant enough that they warrant further investigation. A project refactor I plan on starting soon should provide the perfect opportunity to properly explore and audit this design pattern as well as validate my theories on the technical feasibility of testing.\n\n\n","tags":"vue,vuex","published":true,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1555090798,"_created":1553920516,"_id":"5c9ef20466356305db0000c0"},{"coverBackground":"","title":"Mixins, Renderless Components and Hooks","excerpt":"Renderless Components are all the rage at the moment but why don't we just use a Mixin? ","body":"Mixins, Renderless components and Hooks are three very different ways of composing functionality when building components.\n\nReact and Vue both support these 3 patterns.\n\n\n\n\nMixins\n- Obscure Dataflow\n\n- Hide Functionality\n\n- Can introduce conflicts, this is more likely when using more than 1 mixin, upgrading libraries etc\n\nRenderless\n- The issues that were identified with Mixins + the limitations of the framework led to the creation of the Renderless design pattern\n\n- You compose functionality through the templates\n\n- Data Provider\n\n- Action Provider\n\nHooks\n- Like a mixin, in that you can compose things but instead of composing an object together you compose functions. (Strategy Pattern).\n\n- These hooks can be reused between multiple components \n\n- Because they are pure functions they don't impact anything in the component they're being used in\n\nWhat does the same example look like in each of these?\n\n\n\n","tags":"vue,vue-hooks,renderless,mixins","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1558998767,"_created":1554736211,"_id":"5cab64536635634b060000f8"},{"coverBackground":"","title":"I stopped drinking for 30 days","excerpt":"","body":"Habits before\n\nDrinking pretty much daily, once everything in the day was done it was time to chill with a beer or wine.\n\nMotivation\n\nMy dad has recently gotten pretty ill from his habits with alcohol. To avoid this potential scenario I'd like to decrease my consumption.\n\n\nDay 1\nNot much to say\n\nDay 2 \nNoticed instead of drinking alcohol I'll throw down 3-4 la croix instead. Upside is it leaves me hydrated rather than the opposite. \n\nDay 3 \nI've noticed that I'm waking up with much more energy thats lasting throughout the day.\n\nDay 7\nCar got towed, was feeling pretty shitty so wanted to just get home and drink. I didn't and it was pretty easy to avoid it and instead process the negative feelings, day ended up pretty good after a lengthy gym session.\nI've also noticed that my eating habits have gotten better, I think feeling better allows me to spend that mental strength making better diet decisions.\n\nDay 8\nMarch madness was on and it was a really nice night. Unfortunately I couldnt think of something to do to relax and enjoy the night that didn't involve drinking.","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1554906450,"_created":1554905761,"_id":"5cadfaa1663563146c0001f2"},{"coverBackground":"","title":"Webpack Bundle Analyzer","excerpt":"","body":"I got so far in building my site and my bundle had bloated to > 1mb, this was horrific considering my site consists of effectively 2 pages that don't actually do that much.\n\nUsing webpack bundle analyzer w\/ vue cli\n\n- install analyzer plugin\n\nI was able to view what my bundle contained\n\n- image of bundle pre optimisation\n\nLodash, highlight and moment all stuck out to me as problems.\n\nMoment\n- issue: importing all locales by default when I only need 'en' locales, (sorry non-anglosphere)\n- optimized moment by using vue-cli plugin that ignores all locales except for 'en'\n\nLodash\n- issue: importing the entire library for the get and debounce methods\n- used module imports to only import what I needed instead of the entire library\n\nHighlight.js\n- issue: importing every single language when right now I only need javascript\n- again using module imports to only import the main library and the one language I cared about\n\n- image of final bundle","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1555090749,"_created":1555090719,"_id":"5cb0cd1f6635634d8c0003e1"},{"coverBackground":"","title":"Books I've read in 2019","excerpt":"A list of the books I've read so far in 2019 and my brief opinion on them.","body":"1. Atomic Habits\n\n2. 12 Rules for Life: An Antidote for Chaos\n\n3. Cats Cradle\n\n4. Unshakeable\n\n5. Slaughterhouse Five\n\n6. Can't Hurt Me\n\n7. 5 Second Rule\n\n8. How to Become Ceo\n\n9. Subtle Art of not Giving a F***\n\n10. How Bad Do You Want It\n\n11. Dare to Lead\n\n12. Getting Things Done\n\nOk lets try this out, \n\nI have 12 books the books that I have are as follows\n\nmy favourite is the art of not giving a fuck\n\nthe best thing about this book is its focus on values\nthe way that it starts is a little rough, and there is a certain amount of shock value that the author tries to gain from using rough language. however it quickly quits this gimmick and starts getting into the meat of it.\n\nit talks about values, priorities and mindsets. As is in the name it is all about caring about things in the right way, don't sweat the small stuff: the book. \n\nsecond book, 12 rules for life: an antidote to chaos\n\nthe author, Jordan Peterson, is a very smart guy. a doctor of sociology I believe, citation needed. the book is the distillation of a quora answer, 72 rules for life. its very obvious that this is what the book comes from, Peterson attempts to get his understanding tempered by years of study to be understood by the reader however this is unnecessary fluff for communicating the message he is trying to communicate. and the fact that there were 72 rules, each rule is written in a way that its obvious that its a conglomeration of several others, it has a general theme but while reading the general theme for me was, what was the point this was supposed to be making. it is very well written and engaging however it is so wordy, and written in such a way that trying to keep focused on the point or rule is very difficult. I'd recommend anyone reading to keep notes while reading so that you can quickly figure out what it is that the content should be referring to.\n\nAtomic Habits\n\nThis book has been a great read, really well written and organized. Its one of the few books where I've found that I've implemented a lot of it in my life. Its ethos is tiny changes big results and the small changes it suggests you make its a great and effective way of making those changes.\n\nCats Cradle\n\nThis is a fiction book and the first one I've read of Kurt Vonnegut. Vonnegut has a very interesting style and the thing that I enjoyed most about this book is after you've read it you don't really know what to think about the book but with more thought and over time you really appreciate the small parts that vonnegut does really well and the points he makes in a very subtle fashion.\n\nUnshakeable\n\nThis one is my second favourite, a close second to a subtle art of giving a fuck. Its the first book from Tony Robbins that I've read and it really did change my perspective of my own personal finances. It educates you on the simple few things you need to do to maximise your retirement and save yourself a from the many traps that exist in the American financial industry.\n\nSlaughterhouse Five\nthis is the second vennegut and albiet his most famous entry.  After trying to get his serious book on PTSD publlished based on his experience during WWII in the Dresden Fire bombings. He added aliens and time travel and managed to get it published. After reading up on some other supporting material, i.e. an article on PTSD you really appreciate how well Vennegut writes about the topic and communicates the feeling of PTSD in a roundabout fashion.\n\nCan't Hurt Me\nThis book is by David Goggisnn, an absolute psychopath in my opinion. However noone can deny that what he's accomplished and the mindset he developed in pursuit of these accomplishments is nothing short of remarkable. The guy went through a bunch of hell weeks, ran more ultramarathonsin 8 weeks than most avid runners would ever do in their whole lives. The best thing I took from this book was that the thing that I took from this was that omg my brain is fuckin stopped and I lost my train of thought so the thing I took from this was the love of the process. He didn't like the pain of running or the fear of drowning in his hell weeks but what he did love was the fact that he was doing something noone else was. That he was showing everyone just how mentally callused he was compared to anyone else.\n\n5 second rule\nthis book is I \"read\" as a 5.5 hour audiobook. It could probably have been a 30 minute audio book, I actually think its probably a Ted talk that you could check aout. Anyway, the idea of the 5 second rule is that you countdown and just get stuck into the thing you want to do rather than procrastinating and giving certain parts of your brain the chance to mobilise and stop you from doing that thing. I've found this most useful when getting up in the mornings, other than that I would probably find it most useful in social situations since going up to someone and talking to them is still something I will happily justify away to avoid. I tend to do something similar by putting myself in a situation where it will happen and then holding my breath until it does.\n\nHow to become CEO\nI was gifted this from my IT director after I was given the tech lead position for my team. To fully appreciate the books rules though I feel that a background in business, management or leadership is required. I've noticed going through it again I have a different perception on some of the rules just because of background knowledge I've acquired in between readings.\n\nHow Bad Do You Want It\n\nThis is effectively a well structured and longer motivational youtube video. It has 12+ chapters, each one telling the story of an endurance athlete that overcome a great challenge just by changing their mindset backed up with  a bunch of science. It also goes into a couple of psychological phenomenons that lead to greater results in the field of endurance sports.\n\nDare to Lead\nHalf this book is very thoughtful, the other half is pretty skippable. My biggest takeaway from this book, and this is without a review which I'd like to do since I listened to this one in one go, is that there is two types of leadership one that requires vulnerability and connection and the other being the more instintual authoritarian type. This makes a lot of sense to me and as someone that is actively developing their emotional intelligence this part of the book really resonated with me. Its something I'm trying to implement in my own team and my relationships outside of work.\n\nGetting Things Done\nHave you ever tried to use a todo list and really struggled to make it stick properly. Getting thing done is very similar to Atomic Habits, it prescribes a perfect system for managing everything you want to accomplish. I actually re-read it this year and read it 3 years ago for the first time, ever since then I've used the GTD system in one way or another. If you ever feel overwhelmed, or have more things you can keep track of or even something as simple as forgetting what you needed the moment you got to the shops this is the book for you. \n\n# Recommendations\n\n- Unshakeable\n- Subtle Art of not Giving a F***\n- Atomic Habits \/ Getting Things Done\n- Cats Cradle\n","tags":"books","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1557278011,"_created":1555093414,"_id":"5cb0d7a66635634d8a00033e"},{"coverBackground":"","title":"New Project: Coordinated Language","excerpt":"Short autopsy of a recent tiny project.","body":"I wanted to start a new 30 day project\n\nI needed a name for the project, ever since trying out heroku I've loved that style of name for things where a name isn't important, i.e. projects that aren't going to be used publicly.\n\nI decided to create a small express app using tailwind to accomplish this.\n\nLuckily an npm module exists that does the heavy lifting of generating names so I just used that.\n\nTailwind setup is a little excessive considering what its doing for you however I see how useful this might be in a larger project.\n\n- adding classes to elements is still gross but I like the idea of a subset of css that can be controlled by the developer\n\n- using the configuration themes are possible, the idea of directly assigning text color etc is nightmarish, i.e. changing a them involves changing every instance of a color.\n\n- turns out that even with the guidance of tailwind, I still have no design chops.\n\n[Check it out!](http:\/\/coordinated-language.shannonarcher.me)\n","tags":"project,autopsy","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1555605008,"_created":1555604981,"_id":"5cb8a5f56635637285000166"},{"coverBackground":"","title":"Tailwind CSS: Utility classes","excerpt":"","body":"Concepts of a utility css framework is cool, use a well defined subset.\n\nPutting utility classes in html is ugly.\n\nUsing a preprocesser like scss to use something like BEM and have the classes extend all of the utility classes they need to use.\n\nAlready do this with variables, this is an extension of that.","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1556771647,"_created":1556771637,"_id":"5cca733566356338ba000199"},{"coverBackground":"","title":"Manson's Law of Avoidance","excerpt":"","body":"You avoid things that challenge your identity.\n\ni.e. avoid interviews because they challenge your identity as a confident developer, avoid feedback for the same reason.\n\n","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1556771756,"_created":1556771756,"_id":"5cca73ac66356338bc0003ce"},{"coverBackground":"","title":"V-Model, Computed Setters and Vuex","excerpt":"Serving as a reminder to pay more attention to the documentation, I discovered a great way of using v-model with Vuex.","body":"I thought that if you wanted to use Vuex to store state that v-model shorthand wasn't an option and that the longhand, i.e. `:value \/ @input` was absolutely necessary.\n\nHowever, I recently discovered in the [Vue documentation](https:\/\/vuejs.org\/v2\/guide\/computed.html#Computed-Setter) that while the default behaviour of a computed property is a getter you can define both a getter and a setter using the following syntax,\n\n```Javascript\ncomputed: {\n    search: {\n        get() {\n            return someValue;\n        },\n        set(value) {\n            someValue = value;\n        },\n    },\n}\n```\n\nYou can then return the value you keep in your store and dispatch an action to update the store from the setter.\n\n\n```Javascript\ncomputed: {\n    search: {\n        get() {\n            return this.store.state.search.input;\n        },\n        set(value) {\n            this.store.dispatch('search\/search', value);\n        },\n    },\n}\n```\n\nThereby, given a component with the following template\n\n```xml\n<input v-model=\"search\">\n```\n\nWe can accept input and perform a search using a computed property and v-model binding. This gives us a clean, succinct way of capturing user input and performing an action \/ updating our value in our store.\n\nAdmittedly, there is so many other applications for this getter \/ setter syntax in Vue that I'm looking forward to applying it to the many scenarios where I've come up with other, less elegant solutions to achieve the same affect. ","tags":"vue,vuex,v-model","published":true,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1557279573,"_created":1557236494,"_id":"5cd18b0e6635634b9f000326"},{"coverBackground":"","title":"Vue Filters 101","excerpt":"A common-sense way to define your Vue filters.","body":"A filter in Vue is a function that takes a number of arguments and returns a value.\n\nBut when you define your filter using the typical method it can only be used within a Vue template via the special pipe syntax.\n\n```Javascript\nVue.filter('uppercase', (value) => {\n    return value.toUpperCase();\n});\n\n```\n```Html\n<a href=\"#\">{{ 'Home' | uppercase }}<\/a>\n```\n\nPipe syntax is very elegant and is one of the many nice features of Vue. However defining a filter like this restricts your ability to use it elsewhere, whether thats in vuex or an external service or a computed property.\n\nI've found the trick to this is to define your filters as named exports in a filters module. \n\n```Javascript\nexport const toUpperCase = (value) => {\n\treturn value.toUpperCase();\n};\n\nexport const toLowerCase = (value) => {\n\treturn value.toLowerCase();\n};\n```\n\nWhich means we can use them anywhere in our codebase without restriction, for example:\n\nAs a global filter,\n```Javascript\nimport {toUpperCase, toLowerCase, toCurrency} from '@\/utils\/filters.js';\n\nVue.filter('uppercase', toUpperCase);\nVue.filter('lowercase', toLowerCase);\nVue.filter('currency', toCurrency);\n\n```\n\nOr within a computed property,\n```Javascript\nimport {toCurrency} from '@\/utils\/filters.js';\n\nexport default {\n\tname: 'MyComponent',\n\tcomputed: {\n    \tcostTotal() {\n        \treturn toCurrency(this.cost + this.tax + this.shipping);\n        },\n    },\n};\n```\n\nOr when unit testing... **important!**\n```Javascript\nimport {toCurrency} from '@\/utils\/filters.js';\n\ndescribe('Filters', () => {\n   describe('when using the toCurrency filter', () => {\n       it('should format a number value as currency', () => {\n           expect(toCurrency(3.50)).toBe('$3.50');\n       }); \n   });\n});\n```","tags":"vue","published":true,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1558495098,"_created":1557928162,"_id":"5cdc18e266356311e2000161"},{"coverBackground":"","title":"Books I've Read In 2019","excerpt":"","body":"1. Atomic Habits\n\n2. 12 Rules for Life: An Antidote for Chaos\n\n3. Cats Cradle\n\n4. Unshakeable\n\n5. Slaughterhouse Five\n\n6. Can't Hurt Me\n\n7. 5 Second Rule\n\n8. How to Become Ceo\n\n9. Subtle Art of not Giving a F***\n\n10. How Bad Do You Want It\n\n11. Dare to Lead\n\n12. Getting Things Done\n\nOk lets try this out, \n\nI have 12 books the books that I have are as follows\n\nmy favourite is the art of not giving a fuck\n\nthe best thing about this book is its focus on values\nthe way that it starts is a little rough, and there is a certain amount of shock value that the author tries to gain from using rough language. however it quickly quits this gimmick and starts getting into the meat of it.\n\nit talks about values, priorities and mindsets. As is in the name it is all about caring about things in the right way, don't sweat the small stuff: the book. \n\nsecond book, 12 rules for life: an antidote to chaos\n\nthe author, Jordan Peterson, is a very smart guy. a doctor of sociology I believe, citation needed. the book is the distillation of a quora answer, 72 rules for life. its very obvious that this is what the book comes from, Peterson attempts to get his understanding tempered by years of study to be understood by the reader however this is unnecessary fluff for communicating the message he is trying to communicate. and the fact that there were 72 rules, each rule is written in a way that its obvious that its a conglomeration of several others, it has a general theme but while reading the general theme for me was, what was the point this was supposed to be making. it is very well written and engaging however it is so wordy, and written in such a way that trying to keep focused on the point or rule is very difficult. I'd recommend anyone reading to keep notes while reading so that you can quickly figure out what it is that the content should be referring to.\n\nAtomic Habits\n\nThis book has been a great read, really well written and organized. Its one of the few books where I've found that I've implemented a lot of it in my life. Its ethos is tiny changes big results and the small changes it suggests you make its a great and effective way of making those changes.\n\nCats Cradle\n\nThis is a fiction book and the first one I've read of Kurt Vonnegut. Vonnegut has a very interesting style and the thing that I enjoyed most about this book is after you've read it you don't really know what to think about the book but with more thought and over time you really appreciate the small parts that vonnegut does really well and the points he makes in a very subtle fashion.\n\nUnshakeable\n\nThis one is my second favourite, a close second to a subtle art of giving a fuck. Its the first book from Tony Robbins that I've read and it really did change my perspective of my own personal finances. It educates you on the simple few things you need to do to maximise your retirement and save yourself a from the many traps that exist in the American financial industry.\n\nSlaughterhouse Five\nthis is the second vennegut and albiet his most famous entry.  After trying to get his serious book on PTSD publlished based on his experience during WWII in the Dresden Fire bombings. He added aliens and time travel and managed to get it published. After reading up on some other supporting material, i.e. an article on PTSD you really appreciate how well Vennegut writes about the topic and communicates the feeling of PTSD in a roundabout fashion.\n\nCan't Hurt Me\nThis book is by David Goggisnn, an absolute psychopath in my opinion. However noone can deny that what he's accomplished and the mindset he developed in pursuit of these accomplishments is nothing short of remarkable. The guy went through a bunch of hell weeks, ran more ultramarathonsin 8 weeks than most avid runners would ever do in their whole lives. The best thing I took from this book was that the thing that I took from this was that omg my brain is fuckin stopped and I lost my train of thought so the thing I took from this was the love of the process. He didn't like the pain of running or the fear of drowning in his hell weeks but what he did love was the fact that he was doing something noone else was. That he was showing everyone just how mentally callused he was compared to anyone else.\n\n5 second rule\nthis book is I \"read\" as a 5.5 hour audiobook. It could probably have been a 30 minute audio book, I actually think its probably a Ted talk that you could check aout. Anyway, the idea of the 5 second rule is that you countdown and just get stuck into the thing you want to do rather than procrastinating and giving certain parts of your brain the chance to mobilise and stop you from doing that thing. I've found this most useful when getting up in the mornings, other than that I would probably find it most useful in social situations since going up to someone and talking to them is still something I will happily justify away to avoid. I tend to do something similar by putting myself in a situation where it will happen and then holding my breath until it does.\n\nHow to become CEO\nI was gifted this from my IT director after I was given the tech lead position for my team. To fully appreciate the books rules though I feel that a background in business, management or leadership is required. I've noticed going through it again I have a different perception on some of the rules just because of background knowledge I've acquired in between readings.\n\nHow Bad Do You Want It\n\nThis is effectively a well structured and longer motivational youtube video. It has 12+ chapters, each one telling the story of an endurance athlete that overcome a great challenge just by changing their mindset backed up with  a bunch of science. It also goes into a couple of psychological phenomenons that lead to greater results in the field of endurance sports.\n\nDare to Lead\nHalf this book is very thoughtful, the other half is pretty skippable. My biggest takeaway from this book, and this is without a review which I'd like to do since I listened to this one in one go, is that there is two types of leadership one that requires vulnerability and connection and the other being the more instintual authoritarian type. This makes a lot of sense to me and as someone that is actively developing their emotional intelligence this part of the book really resonated with me. Its something I'm trying to implement in my own team and my relationships outside of work.\n\nGetting Things Done\nHave you ever tried to use a todo list and really struggled to make it stick properly. Getting thing done is very similar to Atomic Habits, it prescribes a perfect system for managing everything you want to accomplish. I actually re-read it this year and read it 3 years ago for the first time, ever since then I've used the GTD system in one way or another. If you ever feel overwhelmed, or have more things you can keep track of or even something as simple as forgetting what you needed the moment you got to the shops this is the book for you. \n\n# Recommendations\n\n- Unshakeable\n- Subtle Art of not Giving a F***\n- Atomic Habits \/ Getting Things Done\n- Cats Cradle\n","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1558495215,"_created":1558495131,"_id":"5ce4bf9b663563559900008f"},{"coverBackground":"","title":"Unit Testing in Vue","excerpt":"A look into how I approach unit testing my Vue components and Vuex modules","body":"","tags":"","published":false,"_mby":"5c91494c66356329d2000379","_by":"5c91494c66356329d2000379","_modified":1558528982,"_created":1558528982,"_id":"5ce543d6663563587000003b"}],"total":17}